import { UserManagement } from "@helpers/faker/um";
import TestNameWithPriceModule from "pages/main/patientAdministration/patientSetup/testNameWithPrice";
import AlertMessage from "@helpers/utils/alertMessage";
import ButtonPage from "@helpers/utils/button";
import FormPage from "@helpers/utils/form";
import TablePage from "@helpers/utils/table";
import { CommonPageObj } from "@pageObject/commonPageObj/commonPageObj";
import { PatientAdministration } from "@helpers/faker/pa";
import { getEnvVariables } from "@support/commands";
import { APIObj } from "@pageObject/apiObj/apiObj";

// initialization
let form = new FormPage();
let commonPage = new CommonPageObj();
let button = new ButtonPage();
let alert = new AlertMessage();
let tableP = new TablePage();
let xpathAssertionPa = new TestNameWithPriceModule();

let data = new PatientAdministration().testNameWithPrice();
let apiObj = new APIObj();
let userData = new UserManagement();
let paData = new PatientAdministration();
const xpathAssertion = xpathAssertionPa;
export class TestNameWithPriceObj {
  addDependency(filePath) {
    // create department with API
    apiObj.createAPI(
      getEnvVariables("apiUrl") + "/departments",
      Object.keys(userData.department("PATHO")).reduce((acc, value) => {
        acc[value] = userData.department("PATHO")[value].value;
        return acc;
      }, {}),
      filePath.dept
    );
  }
  archiveDependency(filePath) {
    // apiObj.deleteAPI(
    //   getEnvVariables("apiUrl") + "/departments/",
    //   filePath.dept
    // );
  }

  // Method to create testname with price //
  createTestNameWithPrice(filePath: any) {
    // update data
    cy.readFile(filePath.dept).then((dep) => {
      data.department_id.value = dep.name;
    });

    console.log(data);
    cy.task("checkFileExists", filePath.testNameWithPrice).then((bool) => {
      if (!bool) {
        button.clickButton(xpathAssertionPa.button().add);
        const promises = [];
        let generatedCode: any;

        for (const key in data) {
          switch (data[key].type) {
            case "input":
              form.inputField(xpathAssertion.form()[key], data[key].value);
              break;
            case "dropdown":
              form.getDropdownWithValue(
                xpathAssertionPa.form()[key],
                data[key].value
              );
              break;
            case "switch":
              button.clickSwitch(xpathAssertionPa.form()[key], data[key].value);
              break;

            case "autogenerated":
              const promise = form
                .getData(xpathAssertionPa.form()[key])
                .then((data) => {
                  generatedCode = data;
                });
              promises.push(promise);
              break;

            default:
              cy.log(data[key]);
              form.inputField(xpathAssertionPa.form()[key], data[key].value);
              break;
          }
        }

        button.clickButton(xpathAssertionPa.button().save);
        cy.wrap(Promise.all(promises)).then(() => {
          cy.writeFile(filePath.testNameWithPrice, {
            ...data,
            code: {
              type: "autogenerated",
              value: generatedCode,
            },
          });
        });
        alert.alertMessage(xpathAssertionPa.alert().create);
      }
    });
  }

  // // Method to search created employee
  searchTestNameWithPrice(filePath: string) {
    cy.readFile(filePath).then((data) => {
      let dat = [data.test_name.value];
      form.inputField(xpathAssertion.list().search, data.test_name.value);
      dat.forEach((item) => {
        tableP.tableBody(xpathAssertion.list().table_td, item);
      });
    });
  }

  // // Method to view created employee
  viewTestNameWithPrice(filePath: string) {
    cy.readFile(filePath).then((data) => {
      form.inputField(xpathAssertion.list().search, data.test_name.value);
      button.actions(xpathAssertion.list().view);

      for (const key in data) {
        commonPage.verifyInputFieldValue(xpathAssertion[key], data[key].value);
      }
    });
  }

  // // Method to update created employee
  // testNameWithPriceUpdate(filePath: string) {
  //   cy.readFile(filePath).then((data) => {
  //     let data =
  //     let employeeData = [employeeName];
  //     form.inputField(xpathAssertionPa.list().search, employeeData[0]);
  //     button.actions(xpathAssertionPa.list().update);

  //     for (let key in data) {
  //       switch (data[key].type) {
  //         case "input":
  //           form.inputField(xpathAssertionPa.form(key), data[key].value);
  //           break;
  //         case "dropdown":
  //           form.getDropdown(xpathAssertionPa.form(key), data[key].value);
  //           break;
  //         case "switch":
  //           break;

  //         case "autogenerated":
  //           break;

  //         default:
  //           form.inputField(xpathAssertionPa.form(key), data[key].value);
  //           break;
  //       }
  //     }
  //     button.clickButton(xpathAssertionPa.button().save);
  //     alert.alertMessage(xpathAssertionPa.alert().update);
  //     cy.writeFile(filePath, data);
  //   });
  // }
  // // Method to archive created employee
  // archiveEmployee(filePath: string) {
  //   cy.readFile(filePath).then((data) => {
  //     let employeeName = `${[data.first_name.value]} ${[
  //       data.middle_name.value,
  //     ]} ${[data.last_name.value]}`;
  //     let employeeData = [employeeName];
  //     form.inputField(xpathAssertionPa.list().search, employeeData[0]);
  //     button.archive(
  //       xpathAssertionPa.delete_confirm().xpath.ok,
  //       xpathAssertionPa.delete_confirm().value.ok
  //     );
  //     alert.alertMessage(xpathAssertionPa.alert().archive);
  //   });
  // }
}

export default TestNameWithPriceObj;
