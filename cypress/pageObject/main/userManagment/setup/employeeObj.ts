import { UserManagement } from "@helpers/faker/um";
import EmployeeSelectors from "pages/main/userManagment/setup/employee";
import AlertMessage from "@helpers/utils/alertMessage";
import Button from "@helpers/utils/button";
import Form from "@helpers/utils/form";
import TablePage from "@helpers/utils/table";
import { CommonPageObj } from "@pageObject/commonPageObj/commonPageObj";
import { getEnvVariables } from "@support/commands";
import { APIObj } from "@pageObject/apiObj/apiObj";

// initialization
let form = new Form();
let commonPage = new CommonPageObj();
let button = new Button();
let alert = new AlertMessage();
let table = new TablePage();
let employeeSelector = new EmployeeSelectors();
let data = new UserManagement().employee();
let apiObj = new APIObj();
let apiData = new UserManagement();
class EmployeeObj {
  addDependency(filePath) {
    // create department with API
    apiObj.createAPI(
      getEnvVariables("apiUrl") + "/departments",
      Object.keys(apiData.department("PATHO")).reduce((acc, value) => {
        acc[value] = apiData.department("PATHO")[value].value;
        return acc;
      }, {}),
      filePath.department
    );

    apiObj.createAPI(
      getEnvVariables("apiUrl") + "/positions",
      Object.keys(apiData.positions()).reduce((acc, value) => {
        acc[value] = apiData.positions()[value].value;
        return acc;
      }, {}),
      filePath.position
    );

    apiObj.createAPI(
      getEnvVariables("apiUrl") + "/designations",
      Object.keys(apiData.designation()).reduce((acc, value) => {
        acc[value] = apiData.designation()[value].value;
        return acc;
      }, {}),
      filePath.designation
    );
  }
  archiveDependency(filePath) {
    apiObj.deleteAPI(
      getEnvVariables("apiUrl") + "/departments/",
      filePath.department
    );
    apiObj.deleteAPI(
      getEnvVariables("apiUrl") + "/positions/",
      filePath.position
    );
    apiObj.deleteAPI(
      getEnvVariables("apiUrl") + "/designations/",
      filePath.designation
    );
  }

  // Method to create employee
  createEmployee(filePath: any) {
    // update data
    cy.readFile(filePath.department).then((dep) => {
      data.department_id.value = dep.name;
    });
    cy.readFile(filePath.position).then((pos) => {
      data.position_id.value = pos.name;
    });
    cy.readFile(filePath.designation).then((des) => {
      data.designation_id.value = des.name;
    });

    cy.task("checkFileExists", filePath.employee).then((bool) => {
      if (!bool) {
        button.clickButton(employeeSelector.button().add);
        const promises = [];
        let generatedCode: any;

        for (let key in data) {
          switch (data[key].type) {
            case "input":
              form.inputField(employeeSelector.form(key), data[key].value);
              break;
            case "dropdown":
              form.getDropdown(employeeSelector.form(key), data[key].value);
              break;
            case "switch":
              button.clickSwitch(employeeSelector.form(key), data[key].value);
              break;

            case "autogenerated":
              const promise = form
                .getData(employeeSelector.form(key))
                .then((data) => {
                  generatedCode = data;
                });
              promises.push(promise);
              break;

            default:
              cy.log(data[key]);
              form.inputField(employeeSelector.form(key), data[key].value);
              break;
          }
        }

        button.clickButton(employeeSelector.button().save);
        cy.wrap(Promise.all(promises)).then(() => {
          cy.writeFile(filePath.employee, {
            ...data,
            code: {
              type: "autogenerated",
              value: generatedCode,
            },
          });
        });
        alert.alertMessage(employeeSelector.alert().create);
      }
    });
  }

  // Method to search created employee
  searchEmployee(filePath: string) {
    cy.readFile(filePath).then((data) => {
      let employeeName = `${[data.first_name.value]} ${[
        data.middle_name.value,
      ]} ${[data.last_name.value]}`;
      let employeeData = [employeeName];
      form.inputField(employeeSelector.list().search, employeeData[0]);
      employeeData.forEach((item) => {
        table.tableBody(employeeSelector.list().table_td, item);
      });
    });
  }

  // Method to view created employee
  viewEmployee(filePath: string) {
    cy.readFile(filePath).then((data) => {
      let employeeName = `${[data.first_name.value]} ${[
        data.middle_name.value,
      ]} ${[data.last_name.value]}`;
      let employeeData = [employeeName];
      form.inputField(employeeSelector.list().search, employeeData[0]);
      button.actions(employeeSelector.list().view);

      for (let key in data) {
        switch (data[key].type) {
          case "dropdown":
            commonPage.verifySelectDropDown(data[key].value);
            break;
          case "switch":
            break;
          default:
            commonPage.verifyInputFieldValue(
              employeeSelector.form(key),
              data[key].value
            );
            break;
        }
      }
    });
  }

  // Method to update created employee
  updateEmployee(filePath: string) {
    cy.readFile(filePath).then((data) => {
      let employeeName = `${[data.first_name.value]} ${[
        data.middle_name.value,
      ]} ${[data.last_name.value]}`;
      let employeeData = [employeeName];
      form.inputField(employeeSelector.list().search, employeeData[0]);
      button.actions(employeeSelector.list().update);

      for (let key in data) {
        switch (data[key].type) {
          case "input":
            form.inputField(employeeSelector.form(key), data[key].value);
            break;
          case "dropdown":
            form.getDropdown(employeeSelector.form(key), data[key].value);
            break;
          case "switch":
            break;

          case "autogenerated":
            break;

          default:
            form.inputField(employeeSelector.form(key), data[key].value);
            break;
        }
      }
      button.clickButton(employeeSelector.button().save);
      alert.alertMessage(employeeSelector.alert().update);
      cy.writeFile(filePath, data);
    });
  }
  // Method to archive created employee
  archiveEmployee(filePath: string) {
    cy.readFile(filePath).then((data) => {
      let employeeName = `${[data.first_name.value]} ${[
        data.middle_name.value,
      ]} ${[data.last_name.value]}`;
      let employeeData = [employeeName];
      form.inputField(employeeSelector.list().search, employeeData[0]);
      button.archive(
        employeeSelector.delete_confirm().xpath.ok,
        employeeSelector.delete_confirm().value.ok
      );
      alert.alertMessage(employeeSelector.alert().archive);
    });
  }
}

export default EmployeeObj;
